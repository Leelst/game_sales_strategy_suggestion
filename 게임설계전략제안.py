# -*- coding: utf-8 -*-
"""게임설계전략제안.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lJH2XvY_bHwaMDIFfh4RO8VzS9ugiZbq

# 게임 설계 전략 제안

게임 시장의 동향과 그에 따른 방향성 제안

데이터를 불러옵니다.
"""

import pandas as pd
import numpy as np

data = '/content/drive/MyDrive/vgames2.csv'
df = pd.read_csv(data)

"""결측치를 제거합니다.<br>
연도가 미정확하게 기입되어있는 자료 역시 삭제합니다. <br>
연도별 10년 단위로 카테고리화합니다.

"""

df = df.dropna()

#연도 미정확하게 기입되어있는 자료 삭제
df = df.loc[(df['Year'].values - 1000) > 0]

# 연도별 카테고리화시킨 칼럼 추가
def decade(x):
  if x < 1990:
    value = '1980-1989'
  elif x < 2000:
    value = '1990-1999'
  elif x < 2010:
    value = '2000-2009'
  else:
    value = '2010-'
  return value

df['Y_category'] = df['Year'].apply(decade)
df

"""판매량 비교를 위해서 단위를 통일합니다.
단위는 Million 단위로 통일합니다.
"""

#수치자료 Million으로 통일 
df['NA_Sales'] = df["NA_Sales"].replace({"K":"*1e-3", "M":""}, regex=True).map(pd.eval).astype(float)
df['EU_Sales'] = df["EU_Sales"].replace({"K":"*1e-3", "M":""}, regex=True).map(pd.eval).astype(float)
df['JP_Sales'] = df["JP_Sales"].replace({"K":"*1e-3", "M":""}, regex=True).map(pd.eval).astype(float)
df['Other_Sales'] = df["Other_Sales"].replace({"K":"*1e-3", "M":""}, regex=True).map(pd.eval).astype(float)
df['Total_Sales'] = df['NA_Sales'] + df['EU_Sales'] + df['JP_Sales'] + df['Other_Sales']
df

"""지역 별 선호하는 게임을 선형 그래프로 확인합니다.<br>"""

import matplotlib.pyplot as plt
import seaborn as sns

#1. 지역별 선호 게임장르 
df_geo = df[['Genre', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].groupby('Genre').sum().reset_index()
df_geo_melt = pd.melt(df_geo, id_vars = 'Genre', var_name = 'region', value_name = 'value' )

plt.figure(figsize=(15,8))
sns.pointplot(x="Genre", y= "value",hue='region',marker="o",data=df_geo_melt)
plt.xticks(size=5,rotation=45, horizontalalignment='right',fontweight='light',fontsize='large')
plt.xlabel('Genre',size=12)
plt.ylabel('Sales(Million)',size=12)

"""연도별 장르 트렌드를 알아봅니다."""

#2. 연도별 장르 트랜드 (연도별 장르 그룹화)

#2-1. 연도별 장르 출시 개수size()한 것 
df_Y_G = df[['Year','Genre']].sort_values('Year').groupby(['Year','Genre']).size().reset_index()

plt.figure(figsize=(15,8))
sns.lineplot(x="Year", y= 0,hue='Genre',data=df_Y_G)
plt.xticks(size=5,rotation=45, horizontalalignment='right',fontweight='light',fontsize='large')
plt.xlabel('Year',size=12)
plt.ylabel('count',size=12)

#2-2. 연도별 장르 Sales Sum()한 것 

df_Y_G_S = df[['Year','Genre','Total_Sales']].groupby(['Year','Genre']).sum()
df_Y_G_S = df_Y_G_S.reset_index()
#df_Y_G_S.head(20)

plt.figure(figsize=(15,8))
sns.lineplot(x="Year", y= 'Total_Sales',hue='Genre', data=df_Y_G_S)
plt.xticks(size=5,rotation=45, horizontalalignment='right',fontweight='light',fontsize='large')
plt.xlabel('Year',size=12)
plt.ylabel('Sales',size=12)

#2-2 설명 자료 

#2004, 2009년에 스포츠 게임이 피크점을 찍은 이유 (2004 - 닌텐도 wii sport 출시 / 2009 - 닌텐도 wii sport resort 출시)
df_2006_sports = df.loc[(df['Year']== 2006)&(df['Genre']=='Sports')].sort_values('Total_Sales',ascending = False)
#df_2004_sports.head(30)
#df_2004_sports['Total_Sales'].sum()
df_2009_sports = df.loc[(df['Year']== 2009)&(df['Genre']=='Sports')].sort_values('Total_Sales',ascending = False)
#df_2009_sports.head(30)
#df_2009_sports['Total_Sales'].sum()
df_2006_sports

#3. (필수)출고량이 높은 게임에 대한 분석 및 시각화 프로세스
#df.sort_values('Total_Sales',ascending=False).head(30)  #total sales 기준 top 30 게임 정렬


#각 장르별 상위 30위 게임 출고량
#df[['Name','Genre','Total_Sales']].sort_values('Total_Sales',ascending = False).groupby('Genre').head()
def top30_sales(x):
  df0 = df.loc[:,['Name','Genre','Total_Sales']]
  value = df0[df0['Genre']==x].sort_values('Total_Sales', ascending=False).head(30)
  return value['Total_Sales'].sum()


Genre = ['Action', 'Misc', 'Platform', 'Sports',
       'Racing', 'Role-Playing', 'Shooter']

list =[]
for genre in Genre:
  list.append(top30_sales(genre))

list
#top30_sales('Sports')

#Top_30_Sales 데이터프레임 만들기
Top_30_Sales = pd.DataFrame({
    'Genre' :  ['Action', 'Misc', 'Platform', 'Sports',
       'Racing', 'Role-Playing', 'Shooter'],
    'Top_30_sum' :  [267.34,
 220.73000000000002,
 333.13,
 296.1,
 244.27000000000007,
 268.03,
 311.46000000000004]

})
Top_30_Sales = Top_30_Sales.sort_values('Top_30_sum',ascending = False).reset_index()

#3- 시각화
fig = plt.figure(figsize = (15,8))
ax = fig.add_subplot(1,1,1)
ax = sns.barplot(x = 'Genre', y = 'Top_30_sum', data = Top_30_Sales )
sns.set(font_scale= 1)
plt.tight_layout()

#2010년도 이후 출시 게임중 중 출고량이 높은 게임에 대한 분석
df.loc[df['Year'] > 2009].sort_values('Total_Sales',ascending=False).head(30)

def top30_sales_2010(x):
  df0 = df.loc[df['Year'] > 2009,['Name','Genre','Total_Sales']]
  value = df0[df0['Genre']==x].sort_values('Total_Sales', ascending=False).head(30)
  return value['Total_Sales'].sum()


Genre = ['Action', 'Misc', 'Platform', 'Sports',
       'Racing', 'Role-Playing', 'Shooter']

list2010 =[]
for genre in Genre:
  list2010.append(top30_sales_2010(genre))

list2010

#Top_30_2010_Sales 데이터프레임 만들기
Top_30_2010_Sales = pd.DataFrame({
    'Genre' :  ['Action', 'Misc', 'Platform', 'Sports',
       'Racing', 'Role-Playing', 'Shooter'],
    'Top_30_2010_sum' :  [180.67999999999998,
 120.17999999999999,
 89.95,
 122.17,
 78.99,
 113.7,
 234.22000000000003]

})
Top_30_2010_Sales = Top_30_2010_Sales.sort_values('Top_30_2010_sum',ascending = False).reset_index()

#3-- 시각화
fig = plt.figure(figsize = (15,8))
ax = fig.add_subplot(1,1,1)
ax = sns.barplot(x = 'Genre', y = 'Top_30_2010_sum', data = Top_30_2010_Sales)
sns.set_theme(font_scale = 3)
#sns.set(font_scale= 8)
#plt.tick_params(axis = 'x', labelsize = 0.2)
plt.tight_layout()

# 2010년 이후 출시 게임의 장르별 출고량
df2010 = df.loc[df['Year'] > 2009]
pop2010 = df2010[['Genre', 'Total_Sales']].groupby(df['Genre']).sum().sort_values('Total_Sales',ascending = False).head(7).reset_index()

fig = plt.figure(figsize = (15,8))
ax2 = fig.add_subplot(1,1,1)
ax2 = sns.barplot(x = 'Genre', y = 'Total_Sales', data = pop2010)
sns.set_theme(font_scale = 1)
plt.tight_layout()

#2010년 이후 출시 게임의 Top30의 장르별 출고량
df2010_top30 = df2010[['Name','Genre', 'Total_Sales']].sort_values('Total_Sales',ascending = False).head(30).reset_index()
df2010_top30_group = df2010_top30.loc[:,['Genre', 'Total_Sales']].groupby('Genre').sum().sort_values('Total_Sales',ascending = False).reset_index()

fig = plt.figure(figsize = (15,8))
ax2 = fig.add_subplot(1,1,1)
ax2 = sns.barplot(x = 'Genre', y = 'Total_Sales', data = df2010_top30_group)
sns.set_theme(font_scale = 1.0)
plt.tight_layout()

#4 출고량 / 게임 수(장르별)
#장르별 게임 수
import numpy as np
df_4_1 = df.loc[:,['Genre']].groupby(df['Genre']).size()
df_4_1 = pd.DataFrame(df_4_1)
#장르별 출고량 수 
df_4_2 = df.loc[:,['Genre','Total_Sales']].groupby(df['Genre']).sum()

df_4_1 = np.array(df_4_1)
#df_4_1 = np.reshape(df_4_1,(12,1))
df_4_2 = np.array(df_4_2)
#df_4_2 = np.reshape(df_4_2,(12,1))

#장르별 출고량 수 / 장르별 게임 수 -> 값이 클수록 경쟁률 낮음
df_4_3 = df_4_2 / df_4_1

row_indices = ['Action','Adventure','Fighting', 'Misc', 'Platform','Puzzle','Racing','Role-Playing','Shooter','Simulation','Sports','Strategy']
column_names = ["competition"]
Competition = pd.DataFrame(df_4_3, index=row_indices, columns=column_names)
Competition

#5. 게임 장르와 플랫폼의 관계
#5-1
# 분포로 확인 -> chi square test
from scipy.stats import chi2_contingency


obs = pd.crosstab( df['Genre'],df['Platform'])
chi2_contingency(obs)

#귀무가설 : 게임 장르와 플랫폼의 관계는 독립이다.(관계없다) 
#대립가설 : 게임 장르와 플랫폼의 관계는 종속이다.(관련이 있다)
#p.value = 0.00 이므로 귀무가설 기각 -> 대립가설 채택 
#결론 : 게임 장르와 플랫폼의 관계는 종속이다.

#5-2 장르와 플랫폼의 관계가 종속이라면 플랫폼 별 게임 수를 찾아보자
df_P_G = df[['Genre','Platform']].groupby(['Genre','Platform']).size().reset_index()

def Genre_Platform(genre):
  return df_P_G.loc[df_P_G['Genre']==genre].sort_values(0,ascending=False).head(3)

#GENRE = ['Platform', 'Shooter', 'Sports', 'Role-Playing', 'Action', 'Racing', 'Misc']R
a1 = Genre_Platform('Platform')
a2 = Genre_Platform('Shooter')
a3 = Genre_Platform('Sports')
a4 = Genre_Platform('Role-Playing')
a5 = Genre_Platform('Action')
a6 = Genre_Platform('Racing')
a7 = Genre_Platform('Misc')

#fig = plt.figure()
#axes1 = fig.add_subplots(2,4,1)
a2

df_P_G.loc[df_P_G['Genre']=='Shooter'].sort_values(0,ascending=False).head(10)

df_P_G.loc[df_P_G['Genre']=='Action'].sort_values(0,ascending=False).head(10)

df_P_G.loc[df_P_G['Genre']=='Misc'].sort_values(0,ascending=False).head(10)

# 2010년 이후 출시 게임의 장르별 평균 출고량
df_G_mean = df.loc[df['Year'] > 2009].groupby('Genre').mean().sort_values('Total_Sales',ascending=False).reset_index()
df_G_mean[['Genre','Total_Sales']]

